generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  doctorPatients Patient[] @relation("DoctorPatients")
  labReports     LabReport[]
  bills          Bill[]

  @@map("users")
}

model Patient {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String
  address     String?
  dateOfBirth DateTime?
  gender      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  doctor     User?       @relation("DoctorPatients", fields: [doctorId], references: [id])
  doctorId   String?
  treatments Treatment[]
  labReports LabReport[]
  bills      Bill[]

  @@map("patients")
}

model Treatment {
  id          String   @id @default(cuid())
  diagnosis   String
  prescription String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId String

  @@map("treatments")
}

model LabReport {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileUrl     String
  fileName    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  patient     Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId   String
  uploadedBy  User    @relation(fields: [uploadedById], references: [id])
  uploadedById String

  @@map("lab_reports")
}

model Bill {
  id          String      @id @default(cuid())
  amount      Float
  description String
  status      String      @default("PENDING")
  paidAt      DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId String
  createdBy User    @relation(fields: [createdById], references: [id])
  createdById String

  @@map("bills")
}

